// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`checkbox select renders checkbox select groups successfully 1`] = `
.pf-c-select__toggle-text {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.pf-c-select__toggle-wrapper {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
  max-width: calc(100% - 1.5rem);
  white-space: normal;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  min-width: 44px;
  max-width: 100%;
  padding: 0.375rem 0.5rem 0.375rem 0.5rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  white-space: nowrap;
  cursor: pointer;
  background-color: #ffffff;
}
.pf-c-select__menu-group-title {
  display: block;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: #72767b;
}
.pf-c-select__menu-group {
  display: block;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-select__menu-group-title {
  display: block;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: #72767b;
}
.pf-c-select__menu-group {
  display: block;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-form__fieldset {
  display: block;
}
.pf-c-form {
  display: grid;
  grid-gap: 1.5rem;
}
.pf-c-select__menu {
  display: block;
  position: absolute;
  z-index: 100;
  min-width: 100%;
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  background-color: #ffffff;
  background-clip: padding-box;
  border: 1px solid transparent;
  box-shadow: 0 0.0625rem 0.0625rem 0rem rgba(3, 3, 3, 0.05), 0 0.25rem 0.5rem 0.25rem rgba(3, 3, 3, 0.06);
}
.pf-c-select.pf-m-expanded {
  display: inline-block;
  color: #282d33;
  position: relative;
  max-width: 100%;
}

<Select
  ariaLabelledBy=""
  className=""
  isExpanded={true}
  isGrouped={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections={null}
  title={null}
  variant="checkbox"
  width="100%"
>
  <div
    className="pf-c-select pf-m-expanded"
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <SelectToggle
      aria-labelledby=" pf-toggle-id-4"
      className=""
      id="pf-toggle-id-4"
      isActive={false}
      isExpanded={true}
      isFocused={false}
      isHovered={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={null}
      style={
        Object {
          "width": "100%",
        }
      }
      type="button"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-4"
        className="pf-c-select__toggle"
        id="pf-toggle-id-4"
        onClick={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "width": "100%",
          }
        }
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
          color="currentColor"
          size="sm"
          title={null}
        >
          <svg
            aria-hidden={true}
            aria-labelledby={null}
            className="pf-c-select__toggle-arrow"
            fill="currentColor"
            height="1em"
            role="img"
            style={
              Object {
                "verticalAlign": "-0.125em",
              }
            }
            viewBox="0 0 320 512"
            width="1em"
          >
            <path
              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
              transform=""
            />
          </svg>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <CheckboxSelect
      aria-labelledby=""
      checked={null}
      className=""
      isExpanded={false}
      isGrouped={true}
      openedOnEnter={false}
    >
      <div
        className="pf-c-select__menu"
      >
        <form
          className="pf-c-form"
          noValidate={true}
        >
          <fieldset
            aria-labelledby=""
            className="pf-c-form__fieldset"
          >
            <CheckboxSelectGroup
              className=""
              key=".0"
              label="group 1"
            >
              <div
                className="pf-c-select__menu-group"
              >
                <div
                  className="pf-c-select__menu-group-title"
                >
                  group 1
                </div>
              </div>
              <CheckboxSelectOption
                className=""
                index={0}
                isChecked={null}
                isDisabled={false}
                key="0"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mr"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Mr"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mr
                  </span>
                </label>
              </CheckboxSelectOption>
              <CheckboxSelectOption
                className=""
                index={1}
                isChecked={null}
                isDisabled={false}
                key="1"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mrs"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Mrs"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mrs
                  </span>
                </label>
              </CheckboxSelectOption>
              <CheckboxSelectOption
                className=""
                index={2}
                isChecked={null}
                isDisabled={false}
                key="2"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Ms"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Ms"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Ms
                  </span>
                </label>
              </CheckboxSelectOption>
              <CheckboxSelectOption
                className=""
                index={3}
                isChecked={null}
                isDisabled={false}
                key="3"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Other"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Other"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Other
                  </span>
                </label>
              </CheckboxSelectOption>
            </CheckboxSelectGroup>
            <CheckboxSelectGroup
              className=""
              key=".1"
              label="group 2"
            >
              <div
                className="pf-c-select__menu-group"
              >
                <div
                  className="pf-c-select__menu-group-title"
                >
                  group 2
                </div>
              </div>
              <CheckboxSelectOption
                className=""
                index={4}
                isChecked={null}
                isDisabled={false}
                key="0"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mr"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Mr"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mr
                  </span>
                </label>
              </CheckboxSelectOption>
              <CheckboxSelectOption
                className=""
                index={5}
                isChecked={null}
                isDisabled={false}
                key="1"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mrs"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Mrs"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mrs
                  </span>
                </label>
              </CheckboxSelectOption>
              <CheckboxSelectOption
                className=""
                index={6}
                isChecked={null}
                isDisabled={false}
                key="2"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Ms"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Ms"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Ms
                  </span>
                </label>
              </CheckboxSelectOption>
              <CheckboxSelectOption
                className=""
                index={7}
                isChecked={null}
                isDisabled={false}
                key="3"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Other"
              >
                <label
                  aria-selected={null}
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                  tabIndex={0}
                >
                  <input
                    checked={null}
                    className="pf-c-check__input"
                    id="Other"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Other
                  </span>
                </label>
              </CheckboxSelectOption>
            </CheckboxSelectGroup>
          </fieldset>
        </form>
      </div>
    </CheckboxSelect>
  </div>
</Select>
`;

exports[`checkbox select renders closed successfully 1`] = `
.pf-c-select__toggle-text {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.pf-c-select__toggle-wrapper {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
  max-width: calc(100% - 1.5rem);
  white-space: normal;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  min-width: 44px;
  max-width: 100%;
  padding: 0.375rem 0.5rem 0.375rem 0.5rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  white-space: nowrap;
  cursor: pointer;
  background-color: #ffffff;
}
.pf-c-select {
  display: inline-block;
  color: #282d33;
  position: relative;
  max-width: 100%;
}

<Select
  ariaLabelledBy=""
  className=""
  isExpanded={false}
  isGrouped={false}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections={null}
  title={null}
  variant="checkbox"
  width="100%"
>
  <div
    className="pf-c-select"
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <SelectToggle
      aria-labelledby=" pf-toggle-id-2"
      className=""
      id="pf-toggle-id-2"
      isActive={false}
      isExpanded={false}
      isFocused={false}
      isHovered={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={null}
      style={
        Object {
          "width": "100%",
        }
      }
      type="button"
    >
      <button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-2"
        className="pf-c-select__toggle"
        id="pf-toggle-id-2"
        onClick={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "width": "100%",
          }
        }
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
          color="currentColor"
          size="sm"
          title={null}
        >
          <svg
            aria-hidden={true}
            aria-labelledby={null}
            className="pf-c-select__toggle-arrow"
            fill="currentColor"
            height="1em"
            role="img"
            style={
              Object {
                "verticalAlign": "-0.125em",
              }
            }
            viewBox="0 0 320 512"
            width="1em"
          >
            <path
              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
              transform=""
            />
          </svg>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`checkbox select renders expanded successfully 1`] = `
.pf-c-select__toggle-text {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.pf-c-select__toggle-wrapper {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
  max-width: calc(100% - 1.5rem);
  white-space: normal;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  min-width: 44px;
  max-width: 100%;
  padding: 0.375rem 0.5rem 0.375rem 0.5rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  white-space: nowrap;
  cursor: pointer;
  background-color: #ffffff;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-check__input {
  display: block;
  margin-top: -0.1875rem;
  cursor: pointer;
}
.pf-c-check__label {
  display: block;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.3;
  color: #282d33;
  cursor: pointer;
}
.pf-c-check.pf-c-select__menu-item {
  display: grid;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: #ededed;
  text-decoration: none;
  grid-template-columns: auto 1fr;
  grid-gap: 0.5rem;
  align-items: center;
}
.pf-c-form__fieldset {
  display: block;
}
.pf-c-form {
  display: grid;
  grid-gap: 1.5rem;
}
.pf-c-select__menu {
  display: block;
  position: absolute;
  z-index: 100;
  min-width: 100%;
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  background-color: #ffffff;
  background-clip: padding-box;
  border: 1px solid transparent;
  box-shadow: 0 0.0625rem 0.0625rem 0rem rgba(3, 3, 3, 0.05), 0 0.25rem 0.5rem 0.25rem rgba(3, 3, 3, 0.06);
}
.pf-c-select.pf-m-expanded {
  display: inline-block;
  color: #282d33;
  position: relative;
  max-width: 100%;
}

<Select
  ariaLabelledBy=""
  className=""
  isExpanded={true}
  isGrouped={false}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections={null}
  title={null}
  variant="checkbox"
  width="100%"
>
  <div
    className="pf-c-select pf-m-expanded"
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <SelectToggle
      aria-labelledby=" pf-toggle-id-3"
      className=""
      id="pf-toggle-id-3"
      isActive={false}
      isExpanded={true}
      isFocused={false}
      isHovered={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={null}
      style={
        Object {
          "width": "100%",
        }
      }
      type="button"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-3"
        className="pf-c-select__toggle"
        id="pf-toggle-id-3"
        onClick={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "width": "100%",
          }
        }
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
          color="currentColor"
          size="sm"
          title={null}
        >
          <svg
            aria-hidden={true}
            aria-labelledby={null}
            className="pf-c-select__toggle-arrow"
            fill="currentColor"
            height="1em"
            role="img"
            style={
              Object {
                "verticalAlign": "-0.125em",
              }
            }
            viewBox="0 0 320 512"
            width="1em"
          >
            <path
              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
              transform=""
            />
          </svg>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <CheckboxSelect
      aria-labelledby=""
      checked={null}
      className=""
      isExpanded={false}
      isGrouped={false}
      openedOnEnter={false}
    >
      <div
        className="pf-c-select__menu"
      >
        <form
          className="pf-c-form"
          noValidate={true}
        >
          <fieldset
            aria-labelledby=""
            className="pf-c-form__fieldset"
          >
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={null}
              isDisabled={false}
              key=".$0"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            >
              <label
                aria-selected={null}
                className="pf-c-check pf-c-select__menu-item"
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <input
                  checked={null}
                  className="pf-c-check__input"
                  id="Mr"
                  onChange={[Function]}
                  type="checkbox"
                />
                <span
                  className="pf-c-check__label"
                >
                  Mr
                </span>
              </label>
            </CheckboxSelectOption>
            <CheckboxSelectOption
              className=""
              index={1}
              isChecked={null}
              isDisabled={false}
              key=".$1"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
              <label
                aria-selected={null}
                className="pf-c-check pf-c-select__menu-item"
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <input
                  checked={null}
                  className="pf-c-check__input"
                  id="Mrs"
                  onChange={[Function]}
                  type="checkbox"
                />
                <span
                  className="pf-c-check__label"
                >
                  Mrs
                </span>
              </label>
            </CheckboxSelectOption>
            <CheckboxSelectOption
              className=""
              index={2}
              isChecked={null}
              isDisabled={false}
              key=".$2"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
              <label
                aria-selected={null}
                className="pf-c-check pf-c-select__menu-item"
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <input
                  checked={null}
                  className="pf-c-check__input"
                  id="Ms"
                  onChange={[Function]}
                  type="checkbox"
                />
                <span
                  className="pf-c-check__label"
                >
                  Ms
                </span>
              </label>
            </CheckboxSelectOption>
            <CheckboxSelectOption
              className=""
              index={3}
              isChecked={null}
              isDisabled={false}
              key=".$3"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            >
              <label
                aria-selected={null}
                className="pf-c-check pf-c-select__menu-item"
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <input
                  checked={null}
                  className="pf-c-check__input"
                  id="Other"
                  onChange={[Function]}
                  type="checkbox"
                />
                <span
                  className="pf-c-check__label"
                >
                  Other
                </span>
              </label>
            </CheckboxSelectOption>
          </fieldset>
        </form>
      </div>
    </CheckboxSelect>
  </div>
</Select>
`;

exports[`select single select renders closed successfully 1`] = `
.pf-c-select__toggle-text {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.pf-c-select__toggle-wrapper {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
  min-width: 0;
  max-width: calc(100% - 1.5rem);
  white-space: normal;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  min-width: 44px;
  padding: 0.375rem 0.5rem 0.375rem 0.5rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  white-space: nowrap;
  cursor: pointer;
  background-color: #ffffff;
}
.pf-c-select {
  display: inline-block;
  color: #282d33;
  position: relative;
  width: 100%;
}

<Select
  ariaLabelledBy=""
  className=""
  isExpanded={false}
  isGrouped={false}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections={null}
  title={null}
  variant="single"
  width="100%"
>
  <div
    className="pf-c-select"
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <SelectToggle
      aria-labelledby=" pf-toggle-id-0"
      className=""
      id="pf-toggle-id-0"
      isActive={false}
      isExpanded={false}
      isFocused={false}
      isHovered={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={null}
      style={
        Object {
          "width": "100%",
        }
      }
      type="button"
    >
      <button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-0"
        className="pf-c-select__toggle"
        id="pf-toggle-id-0"
        onClick={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "width": "100%",
          }
        }
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
          color="currentColor"
          size="sm"
          title={null}
        >
          <svg
            aria-hidden={true}
            aria-labelledby={null}
            className="pf-c-select__toggle-arrow"
            fill="currentColor"
            height="1em"
            role="img"
            style={
              Object {
                "verticalAlign": "-0.125em",
              }
            }
            viewBox="0 0 320 512"
            width="1em"
          >
            <path
              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
              transform=""
            />
          </svg>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`select single select renders expanded successfully 1`] = `
.pf-c-select__toggle-text {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.pf-c-select__toggle-wrapper {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
  min-width: 0;
  max-width: calc(100% - 1.5rem);
  white-space: normal;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle-arrow {
  display: block;
}
.pf-c-select__toggle {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  min-width: 44px;
  padding: 0.375rem 0.5rem 0.375rem 0.5rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  white-space: nowrap;
  cursor: pointer;
  background-color: #ffffff;
}
.pf-c-select__menu-item {
  display: block;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: transparent;
}
.pf-c-select__menu-item {
  display: block;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: transparent;
}
.pf-c-select__menu-item {
  display: block;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: transparent;
}
.pf-c-select__menu-item {
  display: block;
  width: 100%;
  padding: 0.5rem 1rem 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #282d33;
  text-align: left;
  white-space: nowrap;
  background-color: transparent;
}
.pf-c-select__menu {
  display: block;
  position: absolute;
  z-index: 100;
  min-width: 100%;
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  background-color: #ffffff;
  background-clip: padding-box;
  border: 1px solid transparent;
  box-shadow: 0 0.0625rem 0.0625rem 0rem rgba(3, 3, 3, 0.05), 0 0.25rem 0.5rem 0.25rem rgba(3, 3, 3, 0.06);
}
.pf-c-select.pf-m-expanded {
  display: inline-block;
  color: #282d33;
  position: relative;
  width: 100%;
}

<Select
  ariaLabelledBy=""
  className=""
  isExpanded={true}
  isGrouped={false}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections={null}
  title={null}
  variant="single"
  width="100%"
>
  <div
    className="pf-c-select pf-m-expanded"
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <SelectToggle
      aria-labelledby=" pf-toggle-id-1"
      className=""
      id="pf-toggle-id-1"
      isActive={false}
      isExpanded={true}
      isFocused={false}
      isHovered={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={null}
      style={
        Object {
          "width": "100%",
        }
      }
      type="button"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-1"
        className="pf-c-select__toggle"
        id="pf-toggle-id-1"
        onClick={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "width": "100%",
          }
        }
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
          color="currentColor"
          size="sm"
          title={null}
        >
          <svg
            aria-hidden={true}
            aria-labelledby={null}
            className="pf-c-select__toggle-arrow"
            fill="currentColor"
            height="1em"
            role="img"
            style={
              Object {
                "verticalAlign": "-0.125em",
              }
            }
            viewBox="0 0 320 512"
            width="1em"
          >
            <path
              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
              transform=""
            />
          </svg>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SingleSelect
      aria-labelledby=""
      className=""
      isExpanded={false}
      openedOnEnter={false}
      selected={null}
    >
      <ul
        aria-labelledby=""
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          index={0}
          isDisabled={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$0"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
            >
              Mr
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          index={1}
          isDisabled={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$1"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
            >
              Mrs
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          index={2}
          isDisabled={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$2"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Ms"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
            >
              Ms
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          index={3}
          isDisabled={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$3"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SingleSelect>
  </div>
</Select>
`;
